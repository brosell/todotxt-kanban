#!/bin/bash

usage() {
    cat <<USAGE
    $(basename "${0}") [+project]
      create or update the project's kanban page
USAGE
}

[ "$1" = "usage" ] && usage && exit
shift

[[ -z "$1" ]] && echo "Missing project name" && exit 1

todo_sh="$TODO_FULL_SH"

gen_section () {
    local project_name=$1
    local project_query=$2
    local context_query=$3
    

    $todo_sh ls $context_query | # find tasks that for project and context
        grep -E ${project_query} | 
        # sort -n | 
        grep -v -e "^TODO:" \
                -e "^--" \
        | while read line; do 
            line=${line/$context_query/}; # remove the context from the display value
            line=`echo $line | xargs -0`; 
            echo "- $line"; 
        done
}

gen_kanban () {
    local project_name="$1"
    local project_query="$2"

    echo -e "# $project_name\n"
    
    echo -e "## Backlog"
    local t=$(gen_section $project_name "$project_query" "-@done -@inprogress") 
    echo "${t}"

    echo -e "\n## In Progress"
    local t=$(gen_section $project_name "$project_query" "@inprogress") 
    echo "${t}"
    
    echo -e "\n## Done"
    local t=$(gen_section $project_name "$project_query" "@done") 
    echo "${t}"
}

generateFor () {
    local proj=$1
    if [ "$proj" = "none" ] 
    then
        proj_q="-v \+.+"
    else
        proj_q="\s\+\b(\w*$proj\w*)\b(\s|$)"
    fi
    
    local t=$(gen_kanban "${proj}" "${proj_q}")
    echo "${t}"
}

echo "$(generateFor $1)"

